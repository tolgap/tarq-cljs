(ns ^:figwheel-always tarq-cljs.components.vulnerability
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true]
            [cljs.core.async :refer [<!]]
            [sablono.core :as html :refer-macros [html]]
            [tarq-cljs.api :as api]))

(defn vulnerability-table-row [data owner]
  (om/component
   (html [:tr.vulnerability
          [:td (get-in data [:plugin :name])]
          [:td (count (data :websites))]
          [:td [:span (data :title)]
           [:div.icons
            [:i {:class (str "icon icon-" (data :target_type))}]]]
          [:td (clojure.string/join ", " (data :patched_in))]])))

(defn vulnerabilities-table [data owner]
  (reify
    om/IWillMount
    (will-mount [_]
      (go
        (let [vulns (<! (api/json-to api/vulnerabilities-path))]
          (om/update! data nil vulns))))
    om/IRender
    (render [_]
      (html [:div#vulnerability-list.col.s12
             [:div.restricted-height.z-depth-2.table-wrapper
              [:table.highlight
               [:thead
                [:tr [:th "Plugin"] [:th "Num. websites"] [:th "Vulnerability"] [:th "Affects"]]]
               [:tbody
                (om/build-all vulnerability-table-row data)]]]]))))

(defn vulnerabilities-page [data owner]
  (om/component
   (html [:div#vulnerability-page
          [:div.container
           [:div.row
            (om/build vulnerabilities-table (data :objects))]]])))
