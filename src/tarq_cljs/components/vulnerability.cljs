(ns ^:figwheel-always tarq-cljs.components.vulnerability
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require [om.core :as om :include-macros true]
            [cljs.core.async :refer [<!]]
            [sablono.core :as html :refer-macros [html]]
            [tarq-cljs.api :as api]))

(defn vulnerability-list-item [data owner]
  (om/component
   (html [:li.collection-item.vulnerability
          [:a (data :title)]
          [:div.icons
           [:i {:class (str "icon icon-" (data :target_type))}]]])))

(defn vulnerabilities-list [data owner]
  (reify
    om/IWillMount
    (will-mount [_]
      (go
        (let [vulns (<! (api/json-to api/vulnerabilities-path))]
          (om/update! data nil vulns))))
    om/IRender
    (render [_]
      (html [:div#vulnerability-list.col.s12
             [:ul.restricted-height.collection.with-header.z-depth-2
              [:li.collection-header [:h4 "Vulnerabilities"]]
              (om/build-all vulnerability-list-item data)]]))))

(defn vulnerabilities-page [data owner]
  (om/component
   (html [:div#vulnerability-page
          [:div.container
           [:div.row
            (om/build vulnerabilities-list (data :objects))]]])))
